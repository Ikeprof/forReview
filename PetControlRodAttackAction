Attack, Defend, Follow, MasterPain, Status and Stay actions follow this concept, they just use different numbers for the skill value rather than 10

package org.gotti.wurmunlimited.mods.items.actions;

import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.gotti.wurmunlimited.modsupport.actions.ActionPerformer;
import org.gotti.wurmunlimited.modsupport.actions.BehaviourProvider;
import org.gotti.wurmunlimited.modsupport.actions.ModAction;
import org.gotti.wurmunlimited.modsupport.actions.ModActions;
import com.wurmonline.server.Server;
import com.wurmonline.server.behaviours.Action;
import com.wurmonline.server.behaviours.ActionEntry;
import com.wurmonline.server.behaviours.Actions;
import com.wurmonline.server.creatures.Creature;

import com.wurmonline.server.items.Item;
import com.wurmonline.server.players.Player;
import mod.sin.weapons.MagicUserWand;

public class PetControlRodAttackAction implements ModAction {
	private static Logger logger = Logger.getLogger(PetControlRodAttackAction.class.getName());

	private final short actionId;
	private final ActionEntry actionEntry;
	
	public PetControlRodAttackAction() {
		logger.log(Level.WARNING, "PetControlRodAttackAction()");

		actionId = (short) ModActions.getNextActionId();
		actionEntry = ActionEntry.createEntry(
			actionId,
			"Pet Attack",
			"pet attack",
			new int[0] //{ Actions.ACTION_TYPE_QUICK }
		);
		ModActions.registerAction(actionEntry);
	}


	@Override
	public BehaviourProvider getBehaviourProvider()
	{
		return new BehaviourProvider() {
			// Menu with activated object
                        @Override
			public List<ActionEntry> getBehavioursFor(Creature performer, Item subject, Item target)
			{
				if(performer instanceof Player && subject.getTemplate().getTemplateId() == MagicUserWand.templateId && performer.getPet()!=null && target.getTemplate().getTemplateId() == MagicUserWand.templateId){
					return Arrays.asList(actionEntry);
				}
				return null;
			}
		};
	}

	@Override
	public ActionPerformer getActionPerformer()
	{
            return new ActionPerformer() {			
            @Override
            public short getActionId() {
                    return actionId;
            }
            public boolean action(Action action, Creature performer, Item source, Item target, short num, float counter){
                try{
                    if(performer instanceof Player){
                        if (performer.getPet()!=null){
                            performer.getPet().clearOrders();
                            performer.getCommunicator().sendNormalServerMessage("You instruct your companion to attack.");
                            Server.getInstance().broadCastAction(performer.getName() + " instructs their pet to attack", performer, 5);
                            performer.getPet().setSkill(1013, 30f);
                            //performer.sendActionControl("Playing", true, action.getTimeLeft());
                            logger.info("Player "+performer.getName()+" told pet to attack ");
                            return true;
                        } else {
                            performer.getCommunicator().sendNormalServerMessage("You have no pet.");
                        }
                    }
                    return false;
                    } catch (Exception e) {
                        return false;
                    }
                };





// ActionPerformer
	};
        }
}
